Toxic comments and cyber harrasments is a growing concern non-only within  the  social  media  and  other  online  platforms.
With  growing  number  of  users  and  huge  number  of comments, we cenrtainly can not expect to have enough actual human raters to identify the toxicity of thecomments. 
Although  it  is  easy  for  human  to  classify  them  but  it  can  not  simply  just  cover  the  growingdemands.  
An  automated  method  specially  using  ML  (Machine  learnig  algorithms)  which  can  be  trainedover provided data set classified by human raters and further use to infer the toxic comments is one of thesolutions. 
As  deep  neural  netowrks  (a.k.a  DNN)  has  been  proven  to  be  quite  powerful  to  come  up  withhigher order paramters tabbing on grouping the original elements (pixels in pictures, tokenized words in thistask) to infer the labels of comments, 
I use LSTM-RNN as one of the very recent advances in the field tolearn the sequential relationship between choice of vocabulary in order to classify the toxic and non-toxiccomments


# required libraries and versions # 
Python 2.+
scikit-learn (1.9.+). Open source machine learning library for Python.
Keras.: Open source neural network library written in Python. It is capable of
        running on top of either Tensorflow or Theano.
TensorFlow.: Open source software libraries for deep learning.
NLTK (nltk): Open source python libraries for Natural language toolkit 

Other libraries used in this project:
Numpy, Scipy, matplotlib, pickle, pandas, time, collections, functools, itertools  

##############################

# data # 
the data directory, the place  where "train.csv" should be located. Because of the size, I did not include it here. However the link is below:
Link to data:
https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data  


#############################
# saved_model/Ezzat         #
It is directory that I save the trained weights after each run for sake of transfer learning and re-use the trained model without retraining it 

#############################
# LSTM_Classifier.py        #
It is the python function, where the LSTM architecture is designed with the given inputs 


############################
# plot_confusion_matrix.py #
It is the function written in python, to read confusion matrix and plot it with given inputs such as option of being normalized and the classes  


###########################
# Capstone_Project.ipynb  #
It is jupyter notebook main file, where everythings gather together and both benchmark model and solution have been tested with resulting plots  
